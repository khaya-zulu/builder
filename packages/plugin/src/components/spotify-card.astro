---
import Heart from "./icons/heart.astro"
import PlayPause from "./icons/play-pause.astro"
import PlayIcon from "./icons/play.astro"
import ArrowUpRight from "./icons/arrow-up-right.astro"
import PauseIcon from "./icons/pause.astro"

let spotify: any = {};
try {
    const resp = await fetch(`${import.meta.env.ORIGIN_URL}/api/spotify`)
    const data = await resp.json()

    if (data.type === "track") {
        spotify = data.payload
    }
} catch (e) {
    console.log("/api/spotify error:", e)
}

const isEmpty = Object.keys(spotify).length === 0
---

{
    !isEmpty ? <div 
        class:list={[
            "h-[27.5rem] w-[25rem] bg-white rounded-xl group shadow-md border-white border-8 p-2 first:ml-10 relative inline-block align-top",
            "hover:mr-20 transition-all duration-200 delay-0 group-hover:delay-150 group-hover:ease-out",
        ]}
    >
        <div class="absolute left-0 top-0 bg-paper w-full h-full" />
        <div class="w-full h-full z-[2] items-center flex  relative rounded-md spotify-card shadow-sm window-blur">
            <div class="flex flex-col relative flex-1 z-[2]">
                <img
                    id="song-cover"
                    src={spotify?.songCover}
                    class:list={[
                        "w-[5rem] h-[5rem] object-cover rounded-xl transition-[filter] shadow mx-auto mb-4 shadow-md",
                    ]}
                    alt="cover image"
                />
                <div id="song-name" class="text-center text-zcool px-5 truncate w-60 mx-auto">{spotify?.songName}</div>
                <div id="song-artists" class="text-center text-slate-700 truncate w-60 mx-auto">{spotify?.songArtists?.join(", ")}</div>
                <div class="w-2/3 mt-8 mx-auto">
                    <div class="flex justify-between text-sm">
                        <div id="progress" _progress={spotify?.progress} _isPlaying={spotify?.isPlaying} />
                        <div id="duration" _duration={spotify?.duration} />
                    </div>
                    <div class="h-1 mt-2 rounded-full bg-slate-400 mx-auto progress">
                        <div id="progress-bar" class="h-full w-0 rounded-full bg-slate-500"></div>
                    </div>
                </div>
                <div class="flex gap-5 items-center justify-center mt-4 controls">
                    <Heart className="w-4 h-4" />
                    <div class="flex gap-3 items-center">
                        <PlayPause className="w-5 h-5 -scale-100 mt-1" />
                        <div class="w-12 h-12 rounded-full play flex items-center justify-center shadow-sm">
                            {spotify?.isPlaying ? <PauseIcon className="w-6 h-6" /> : <PlayIcon />}
                        </div>
                        <PlayPause className="w-5 h-5" />
                    </div>
                    <ArrowUpRight className="w-4 h-4" />
                </div>
            </div>
        </div>
    </div> : <div class="w-24 inline-block" />
}

<style>
    #song-name {
        color: var(--os-spotify-song-name-text-color);
    }

    #song-artists {
        color: var(--os-spotify-song-artists-text-color);
    }

    #progress, #duration {
        color: var(--os-spotify-track-color);
    }

    .spotify-card {
        background-image: linear-gradient(to bottom right, var(--os-spotify-card-background-from), var(--os-spotify-card-background-to));
        border: 2px solid var(--os-spotify-card-border-color);
    }

    .progress {
        background-color: var(--os-spotify-progress-background-color);
    }

    .progress div {
        background-color: var(--os-spotify-progress-color);
    }

    .play {
        background-color: var(--os-spotify-play-background-color);
        color: var(--os-spotify-play-color);
    }

    .controls {
        color: var(--os-spotify-controls-color);
    }
</style>

<script>
    import { analogTime } from "../lib/utils.ts"
    import { animateEl } from "../lib/animate.ts"

    const elProgress = document.getElementById("progress")
    const elDuration = document.getElementById("duration")
    const elProgressBar = document.getElementById("progress-bar")

    const elSongCover = document.getElementById("song-cover")
    const elSongName = document.getElementById("song-name")
    const elSongArtists = document.getElementById("song-artists")

    if (elProgress && elDuration && elProgressBar && elSongCover && elSongName && elSongArtists) {
        const duration = Number(elDuration?.getAttribute("_duration") || 0)

        let progress = Number(elProgress?.getAttribute("_progress") || 0)

        console.log("Spotify Card Loaded", { duration, progress })

        elProgress.innerHTML = `${analogTime(progress)}`
        elDuration.innerHTML = `${analogTime(duration)}`

        let uiUpdateRetryCount = 0

        const updateUI = async () => {
            const resp = await fetch(`${window.origin}/api/spotify`)
            const spotify = await resp.json()

            const spotifyPayload = spotify.payload ?? spotify

            elSongCover.src = spotifyPayload?.songCover
            elSongName.innerHTML = spotifyPayload?.songName
            elSongArtists.innerHTML = spotifyPayload?.songArtists?.join(", ")

            elDuration.innerHTML = `${analogTime(spotifyPayload.duration)}`
            progress = spotifyPayload.progress ?? 0;
            elProgress.innerHTML = `${analogTime(progress)}`

            const animateDuration = duration - progress
            animateEl(elProgressBar, { width: [`${(progress / duration) * 100}%`, "100%"] }, { duration: animateDuration < 0 ? 0 : animateDuration})

            uiUpdateRetryCount = 0
        }

        setInterval(() => {
            progress += 1000
            elProgress.innerHTML = `${analogTime(progress)}`

            if (progress >= duration && uiUpdateRetryCount <= 3) {
                uiUpdateRetryCount += 1
                updateUI()
            }
        }, 1000)

        animateEl(elProgressBar, { width: [`${(progress / duration) * 100}%`, "100%"] }, { duration: duration - progress })
    }
</script>